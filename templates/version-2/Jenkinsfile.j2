node {

	def minioserver = '{{ minio_server_address }}:{{ minio_port }}'
	def bucketname = '{{ project_name_config }}'

	def mvnHome = tool name: 'maven-{{ mavenVersion }}', type: 'maven'

  	def buildNumber
	def project_name = '{{ project_name }}'
	def project_name_config = '{{ project_name_config }}'
	def gitBranch = env.BRANCH_NAME
	def counterJobName = '{{ project_name }}_BuildCounter'

    def autoDeployOn = [
    	{% for autoDeployItem in buildFlowName.autoDeployOn %}
    	[ branch: '{{ autoDeployItem.branch }}', environment: '{{ autoDeployItem.environment }}' ]{% if not loop.last %},{% endif %}
    	{% endfor %}
    ]

    def aemArtifactList = [ 
    	[ name: 'all', path: "${project_name_config}.all/target", file: "${project_name_config}-all-2.2-SNAPSHOT.zip" ]
    ]

    def dispatcherTargetPath = 'target/classes'
    def dispatcherList = [ [ type: 'author', name: 'disp_authors' ], [ type: 'publish', name: 'disp_publishers' ] ]

	dir(project_name) {
		
		deleteDir()

		stage('Build preparation') {
			def counterJob = build job: counterJobName , parameters: [string(name: 'PARENT_BRANCH', value: "${project_name}_BuildFlow/${gitBranch}")]
			buildNumber = counterJob.getNumber().toString()
		}

		stage('Git checkout') {
			try {
				git branch: gitBranch, credentialsId: 'git-credentials', url: '{{ gitRepository }}'
			} catch (error) {
				build job: 'Service_Set_Status' , parameters: [string(name: 'JOB_NAME', value: "${counterJobName}"), string(name: 'JOB_NUMBER', value: "${buildNumber}")]
				throw error
			}
		}

		stage('Build AEM artifacts') {
			try {
				withCredentials([usernamePassword(credentialsId: 'jenkins-on-aem', passwordVariable: 'requestPassword', usernameVariable: 'requestUsername')]) {
					sh "${mvnHome}/bin/mvn clean install -P deploy-all -Daem.host={{ ci_aem_author }} -Daem.port={% if hostvars[ci_aem_author]['aem_instance_port'] is defined %}{{ hostvars[ci_aem_author]['aem_instance_port'] }}{% else %}{{ aem_instance_port }}{% endif %} -Dsling.user=${env.requestUsername} -Dsling.password=${env.requestPassword}"
				}
			} catch (error) {
				build job: 'Service_Set_Status' , parameters: [string(name: 'JOB_NAME', value: "${counterJobName}"), string(name: 'JOB_NUMBER', value: "${buildNumber}")]
				throw error
			}
		}

		stage("Build Dispatcher artifacts") {
			try {
				dir('{{ project_name_config }}.dispatcher') {
					def workspace = pwd().toString()
					for (disp_item in dispatcherList) {
						sh "${mvnHome}/bin/mvn clean package -Ddispatcher.host=${disp_item.name} -Ddispatcher.role=${disp_item.type}"	
						dir(dispatcherTargetPath) {
							sh "zip ${workspace}/${disp_item.name}.zip ./* -r"
						}
					}
					for (disp_item in dispatcherList) {
						sh "zip ${project_name_config}-dispatcher.zip ${disp_item.name}.zip"
					}
				}
			} catch (error) {
				build job: 'Service_Set_Status' , parameters: [string(name: 'JOB_NAME', value: "${counterJobName}"), string(name: 'JOB_NUMBER', value: "${buildNumber}")]
				throw error
			}
		}

		stage("SonarQube + JaCoCO analyze") {
			try {
				step([$class: 'JacocoPublisher', execPattern:'**/**.exec', classPattern: '**/classes', sourcePattern: '**/src/main/java', exclusionPattern: ''])
				withSonarQubeEnv('{{ sonar_server_address }}') {
					sh "${mvnHome}/bin/mvn sonar:sonar -Dsonar.projectVersion=${buildNumber}_${gitBranch} -Dsonar.project_name=${project_name}-${gitBranch}-branch" 
				}
				def sonarGateCheck
				timeout(time: 20, unit: 'MINUTES') {
					sonarGateCheck = waitForQualityGate()
				}
				if ( sonarGateCheck.status != 'OK' ) {
					error 'Analyze: SonarQube (Quality Gate check failed)'
				}
			} catch (error) {
				build job: 'Service_Set_Status' , parameters: [string(name: 'JOB_NAME', value: "${counterJobName}"), string(name: 'JOB_NUMBER', value: "${buildNumber}")]
				throw error
			}
		}
		
		stage("Upload AEM artifacts to s3 storage") {
			try {
				for ( artifact in aemArtifactList ) {
					dir(artifact.path) {
						def artifactName = "${project_name_config}-${artifact.name}"

						                    withAWS(endpointUrl: minioserver , credentials:'MINIO_CREDENTIALS') {

						                              s3Upload(pathStyleAccessEnabled: true, file: artifact.file , bucket: bucketname, path:"${gitBranch}/${buildNumber}/${artifactName}/${artifact.file}")
                                                 }
						sleep 1
					}
				}
			} catch (error) {
				build job: 'Service_Set_Status' , parameters: [string(name: 'JOB_NAME', value: "${counterJobName}"), string(name: 'JOB_NUMBER', value: "${buildNumber}")]
				throw error
			}
		}


		stage("Upload Dispatchers artifacts to s3 storage") {
			try {
				dir("${project_name_config}.dispatcher") {


										                    withAWS(endpointUrl: minioserver , credentials:'MINIO_CREDENTIALS') {

						                              s3Upload(pathStyleAccessEnabled: true, file: "${project_name_config}-dispatcher.zip" , bucket: bucketname, path:"${gitBranch}/${buildNumber}/${project_name_config}-dispatcher/${project_name_config}-dispatcher.zip")
                                                 }
							}
			} catch (error) {
				build job: 'Service_Set_Status' , parameters: [string(name: 'JOB_NAME', value: "${counterJobName}"), string(name: 'JOB_NUMBER', value: "${buildNumber}")]
				throw error
			}
		}



		for ( autoDeploy in autoDeployOn ) {
			if ( gitBranch == autoDeploy.branch ) {
				def envList = autoDeploy.environment.split(',')
				for (int i = 0; i < envList.size(); i++) {
					def loopItem = envList[i]
					stage("Automatic deployment on ${loopItem}") {
						try {
							build job: '{{ project_name }}_Deploy' , parameters: [string(name: '{{ project_name }}_BuildCounter', value: "nulljob/${counterJobName}/${buildNumber}"), string(name: '{{ project_name_config }}_dispatcher', value: 'true'), string(name: '{{ project_name_config }}_environment', value: envList[i])]
						} catch (error) {
							build job: 'Service_Set_Status' , parameters: [string(name: 'JOB_NAME', value: "${counterJobName}"), string(name: 'JOB_NUMBER', value: "${buildNumber}")]
							throw error
						}
					}
				}
			}
		}
	}
}
