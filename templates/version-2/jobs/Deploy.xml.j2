<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.11">
  <actions>
    <io.jenkins.blueocean.service.embedded.BlueOceanUrlAction plugin="blueocean-rest-impl@1.1.2">
      <blueOceanUrlObject class="io.jenkins.blueocean.service.embedded.BlueOceanUrlObjectImpl">
        <mappedUrl>blue/organizations/jenkins/deploy</mappedUrl>
      </blueOceanUrlObject>
    </io.jenkins.blueocean.service.embedded.BlueOceanUrlAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.4.5">
      <gitLabConnection></gitLabConnection>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <com.synopsys.arc.jenkinsci.plugins.jobrestrictions.jobs.JobRestrictionProperty plugin="job-restrictions@0.6"/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.RunParameterDefinition>
          <name>source_job</name>
          <description></description>
          <project_name>{{ project_name }}_BuildCounter</project_name>
          <filter>SUCCESSFUL</filter>
        </hudson.model.RunParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>{{ project_name_config }}_all</name>
          <description>True if all AEM artifact should be deployed</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>{{ project_name_config }}_dispatcher</name>
          <description>True if Apache and Dispatcher configuration should be deployed</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>{{ project_name_config }}_environment</name>
          <description>Select environment for deployment</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
            {% for envItem in env_types_list if envItem != buildFlowName.integrationEnv %}
              <string>{{ envItem }}</string>
            {% endfor %}
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.36">
    <script>import groovy.json.JsonSlurperClassic 

@NonCPS
def jsonParse(def json) {
    new groovy.json.JsonSlurperClassic().parseText(json)
}


node {

    deleteDir()

    def aemDeploymentList = []
    def deploymentList = []


    def gitBranch
    def buildNumber
    
    stage(&apos;Preparation&apos;) {
      println "Preparation stage"
        jobInfo = takeJobInfo(source_job - 'nulljob/')
        buildNumber = source_job.split(&apos;/&apos;)[-1]
        gitBranch = jobInfo.actions[0].causes[0].upstreamUrl.split(&apos;/&apos;)[-1]

        if ( {{ projectNameConfig }}_all == &apos;true&apos;) {
            aemDeploymentList.push(&apos;all&apos;)
        }
        deploymentList += aemDeploymentList
        if ( {{ projectNameConfig }}_dispatcher == &apos;true&apos; ) {
            deploymentList.push(&apos;dispatcher&apos;)
        }



    }
    
    stage(&apos;Downloading artifacts&apos;) {
            println "Downloading artifacts"
    }

    stage(&apos;AEM Artifacts deployment&apos;) {
     println "AEM Artifacts deployment"

   for (deploymentItem in deploymentList) {
       def artifactName = "${project_name_config}-${artifact.name}"
       ansibleTower(
            towerServer: 'aem-tower.epm-ldi.projects.epam.com',
            templateType: 'job',
            jobTemplate: 'deploy-aem-package',
            importTowerLogs: true,
            inventory: "${test_environment}-aem-epc",
            jobTags: '',
            skipJobTags: '',
            limit: '',
            removeColor: false,
            verbose: true,
            credential: '',
             extraVars: """---

                 s3_object: ${gitBranch}/${buildNumber}/${project_name_config}-${deploymentItem}/${project_name_config}-${deploymentItem}-2.2-SNAPSHOT.zip
                 
                 """
        )

    }

    stage(&apos;Dispatcher Apache configuration deployment&apos;) {
                 s3_object: ${gitBranch}/${buildNumber}/${artifactName}/${artifact.file} println "Dispatcher Apache configuration deployment"
                 
    }
}

def takeJobInfo(job_name) {
                 """ dir(&apos;temp&apos;) {
        )        httpRequest acceptType: &apos;APPLICATION_JSON&apos;, outputFile: &apos;job_file.json&apos;, authentication: &apos;jenkins-on-jenkins&apos;, contentType: &apos;APPLICATION_JSON&apos;, url: &quot;http://localhost:{{ jenkins_port }}/job/${job_name}api/json&quot;
        def jobInfo = jsonParse(readFile(&quot;job_file.json&quot;))
        deleteDir()
        return jobInfo
    }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
