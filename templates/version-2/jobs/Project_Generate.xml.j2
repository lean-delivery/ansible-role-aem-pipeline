<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.11">
  <actions>
    <io.jenkins.blueocean.service.embedded.BlueOceanUrlAction plugin="blueocean-rest-impl@1.1.0">
      <blueOceanUrlObject class="io.jenkins.blueocean.service.embedded.BlueOceanUrlObjectImpl">
        <mappedUrl>blue/organizations/jenkins/generate-test</mappedUrl>
      </blueOceanUrlObject>
    </io.jenkins.blueocean.service.embedded.BlueOceanUrlAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.4.5">
      <gitLabConnection></gitLabConnection>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <com.synopsys.arc.jenkinsci.plugins.jobrestrictions.jobs.JobRestrictionProperty plugin="job-restrictions@0.6"/>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.34">
    <script>node {
    def mvnHome = tool name: &apos;maven-{{ mavenVersion }}&apos;, type: &apos;maven&apos;
    def arhcetypeGit = &apos;{{ archetypeGitRepository }}&apos;
    def archetypeGitBranch = &apos;{{ archetypeGitBranch }}&apos;
    def aem_version = &apos;{{ aem_version }}&apos;

    def projectName = &apos;{{ projectNameConfig }}&apos;
    def projectGit = &apos;{{ gitRepository }}&apos;
    
    deleteDir()
    git credentialsId: &apos;git-credentials&apos;, branch: archetypeGitBranch, url: arhcetypeGit
    stage(&apos;Generate Archetype&apos;) {
      sh &quot;${mvnHome}/bin/mvn install&quot;
    }

    deleteDir()
    stage(&apos;Generate Project Source Code from Archetype&apos;) {
      sh script: &quot;&quot;&quot;\
        ${mvnHome}/bin/mvn archetype:generate \
         -DarchetypeGroupId=com.epam.aem.mvn -DarchetypeArtifactId=maven-archetype-aem -DarchetypeVersion=2.2-SNAPSHOT \
         -DgroupId=com.epam.${projectName} -DartifactId=${projectName} -Dversion=2.2-SNAPSHOT \
         -DartifactName=&quot;${projectName.toUpperCase()} AEM Application&quot; \
         -DappsFolderName=${projectName} \
         -DcontentFolderName=${projectName}.content \
         -DpackageGroup=${projectName}.packages \
         -DaemVersion=${aem_version}.0 \
         -DaddSampleContent=y \
         -DinteractiveMode=false&quot;&quot;&quot;
    }
    dir(projectName) {
      stage(&apos;Prepare git repository&apos;) {
        sshagent([&apos;git-credentials&apos;]) {
          sh &apos;git init&apos;
          sh &quot;git remote add origin ${projectGit}&quot;
        }
      }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
